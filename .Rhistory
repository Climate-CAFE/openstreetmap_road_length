# %%%%%%%%%%%%%%%%%%%% READ IN GADM DATA %%%%%%%%%%%%%%%%%%%%%%% #
# Read in cleaned data from Step 1.
# This data should have a NUMERIC column for the GID of interest.
#
filename_gadm <- "gadm41_MEX_2.shp" # Replace with the name of your GADM file
gadm_poly <- st_read(paste0(gadm_dir, filename_gadm))
# Reading in packages
library(tidyverse)
library(sf)
library(data.table)
# %%%%%%%%%%%%%%%%%%%% READ IN GADM DATA %%%%%%%%%%%%%%%%%%%%%%% #
# Read in cleaned data from Step 1.
# This data should have a NUMERIC column for the GID of interest.
#
filename_gadm <- "gadm41_MEX_2.shp" # Replace with the name of your GADM file
gadm_poly <- st_read(paste0(gadm_dir, filename_gadm))
gadm_dir <- "C:/Users/zpopp/OneDrive - Boston University/Desktop/CAFE/OSM/GADM"
# %%%%%%%%%%%%%%%%%%%% READ IN GADM DATA %%%%%%%%%%%%%%%%%%%%%%% #
# Read in cleaned data from Step 1.
# This data should have a NUMERIC column for the GID of interest.
#
filename_gadm <- "gadm41_MEX_2.shp" # Replace with the name of your GADM file
gadm_poly <- st_read(paste0(gadm_dir, filename_gadm))
gadm_poly <- st_read(paste0(gadm_dir, "/", filename_gadm))
# Replace periods in the ID column with underscores
#
gadm_poly$GID_1 <- gsub("\\.", "_", gadm_poly$GID_1)
gadm_poly$GID_2 <- gsub("\\.", "_", gadm_poly$GID_2)
# List all unique geographic identifiers. We want to isolate the file by a
# region larger than the administrative boundary to which we will aggregate,
# as this will allow us to subset the processing
#
GID_1_list <- gadm_poly$GID_1     #integer; does not contain leading zeroes
# List all unique geographic identifiers. We want to isolate the file by a
# region larger than the administrative boundary to which we will aggregate,
# as this will allow us to subset the processing
#
GID_1_list <- unique(gadm_poly$GID_1)     #integer; does not contain leading zeroes
# Select the data for the chosen state.
# Make sure the subsequent number for the GID column name matches the level
# at which you are doing your analysis. In this example, analysis is done
# for each municipality (Level 2) in a particular state (Level 1), so the chosen
# column is GID_1_num rather than GID_2_num (municipality) or GID_0 (country).
#
gadm_state <- gadm_poly %>% filter(
GID_1_num == index
)
# Use index input to subset to single "state" or "district" for reduction
# of processing time
#
GID <- GID_1_list[index]
index <- 1
# Use index input to subset to single "state" or "district" for reduction
# of processing time
#
GID <- GID_1_list[index]
# %%%%%%%%%%%%%%%%%%%% READ IN GADM DATA %%%%%%%%%%%%%%%%%%%%%%% #
# Read in cleaned data from Step 1.
# This data should have a NUMERIC column for the GID of interest.
#
filename_gadm <- "gadm41_MEX_2.shp" # Replace with the name of your GADM file
gadm_poly <- st_read(paste0(gadm_dir, "/", filename_gadm))
# Replace periods in the ID column with underscores
#
gadm_poly$GID_1 <- gsub("\\.", "_", gadm_poly$GID_1)
gadm_poly$GID_2 <- gsub("\\.", "_", gadm_poly$GID_2)
# List all unique geographic identifiers. We want to isolate the file by a
# region larger than the administrative boundary to which we will aggregate,
# as this will allow us to subset the processing
#
GID_1_list <- unique(gadm_poly$GID_1)     #integer; does not contain leading zeroes
# Use index input to subset to single "state" or "district" for reduction
# of processing time
#
GID_in <- GID_1_list[index]
# Select the data for the chosen state.
# Make sure the subsequent number for the GID column name matches the level
# at which you are doing your analysis. In this example, analysis is done
# for each municipality (Level 2) in a particular state (Level 1), so the chosen
# column is GID_1 rather than GID_2 (municipality) or GID_0 (country).
#
gadm_state <- gadm_poly[gadm_poly$GID_1 == GID_in]
gadm_dir
roads_indir <- "C:/Users/zpopp/OneDrive - Boston University/Desktop/CAFE/OSM/OSM/Raw"
roads_outdir <- "C:/Users/zpopp/OneDrive - Boston University/Desktop/CAFE/OSM/OSM/Output"
# %%%%%%%%%%%%%%%%%%%% READ IN OPENSTREETMAP DATA %%%%%%%%%%%%%%%%%%%%%%% #
# Read in OSM roads
# The file may take a minute or two to load, as it's a big file.
# There may be millions of observations, depending on the size of the region.
#
filename_osm <- "gis_osm_roads_free_1.shp" # Replace with your file's name
osm_roads <- st_read(paste0(roads_indir, filename_osm))
osm_roads <- st_read(paste0(roads_indir, "/", filename_osm))
gadm_dir <- "C:/Users/zpopp/OneDrive - Boston University/Desktop/CAFE/OSM/GADM"
roads_indir <- "C:/Users/zpopp/OneDrive - Boston University/Desktop/CAFE/OSM/OSM/Raw"
index <- 1
# %%%%%%%%%%%%%%%%%%%% READ IN GADM DATA %%%%%%%%%%%%%%%%%%%%%%% #
# Read in administrative boundary data
#
filename_gadm <- "gadm41_MEX_2.shp" # Replace with the name of your GADM file
gadm_poly <- st_read(paste0(gadm_dir, "/", filename_gadm))
# Replace periods in the ID column with underscores
#
gadm_poly$GID_1 <- gsub("\\.", "_", gadm_poly$GID_1)
# %%%%%%%%%%%%%%%%%%%% READ IN GADM DATA %%%%%%%%%%%%%%%%%%%%%%% #
# Read in administrative boundary data
#
filename_gadm <- "gadm41_MEX_2.shp" # Replace with the name of your GADM file
gadm_poly <- st_read(paste0(gadm_dir, "/", filename_gadm))
# Reading in packages
#
library(tidyverse)
library(sf)
library(data.table)
# %%%%%%%%%%%%%%%%%%%% READ IN GADM DATA %%%%%%%%%%%%%%%%%%%%%%% #
# Read in administrative boundary data
#
filename_gadm <- "gadm41_MEX_2.shp" # Replace with the name of your GADM file
gadm_poly <- st_read(paste0(gadm_dir, "/", filename_gadm))
# Replace periods in the ID column with underscores
#
gadm_poly$GID_1 <- gsub("\\.", "_", gadm_poly$GID_1)
gadm_poly$GID_2 <- gsub("\\.", "_", gadm_poly$GID_2)
# List all unique geographic identifiers. We want to isolate the file by a
# region larger than the administrative boundary to which we will aggregate,
# as this will allow us to subset the processing
#
GID_1_list <- unique(gadm_poly$GID_1)     #integer; does not contain leading zeroes
# Use index input to subset to single "state" or "district" for reduction
# of processing time
#
GID_in <- GID_1_list[index]
# Select the data for the chosen state.
# Make sure the subsequent number for the GID column name matches the level
# at which you are doing your analysis. In this example, analysis is done
# for each municipality (Level 2) in a particular state (Level 1), so the chosen
# column is GID_1 rather than GID_2 (municipality) or GID_0 (country).
#
gadm_state <- gadm_poly[gadm_poly$GID_1 == GID_in, ]
# %%%%%%%%%%%%%%%%%%%% READ IN OPENSTREETMAP DATA %%%%%%%%%%%%%%%%%%%%%%% #
# Read in OSM roads
# The file may take a minute or two to load, as it's a big file.
# There may be millions of observations, depending on the size of the region.
#
filename_osm <- "gis_osm_roads_free_1.shp" # Replace with your file's name
osm_roads <- st_read(paste0(roads_indir, "/", filename_osm))
# Get the bounding box of the state
#
state_bbox <- st_bbox(gadm_state)
# Determine the center longitude
#
long_center <- (state_bbox$xmax + state_bbox$xmin)/2
lat_center <- (state_bbox$ymax + state_bbox$ymin)/2
# Determine the UTM Zone for the longitude center
#
utm_zone <- floor((long_center+180)/6)+1
# Extract the EPSG code
#
epsg_code <- ifelse(
lat_center >= 0,
utm_zone + 32600,
utm_zone + 32700
)
# Transform both GIS data layers to UTM
#
gadm_state <- st_transform(gadm_state, epsg_code)
osm_roads <- st_transform(osm_roads, epsg_code)
# Subset column names
#
gadm_state <- gadm_state[c("GID_1", "GID_2", "geometry")]
osm_roads <- osm_roads[c("fclass", "geometry")]
# Apply the intersection between each municipality (level 2) and road
#
gadm_level2_full_osm <- st_intersection(gadm_state, osm_roads)
# %%%%%%%%%%%%%%%%%%%% READ IN OPENSTREETMAP DATA %%%%%%%%%%%%%%%%%%%%%%% #
# Read in OSM roads
# The file may take a minute or two to load, as it's a big file.
# There may be millions of observations, depending on the size of the region.
#
filename_osm <- "gis_osm_roads_free_1.shp" # Replace with your file's name
osm_roads <- st_read(paste0(roads_indir, "/", filename_osm))
# Get the bounding box of the state
#
state_bbox <- st_bbox(gadm_state)
# Determine the center longitude
#
long_center <- (state_bbox$xmax + state_bbox$xmin)/2
lat_center <- (state_bbox$ymax + state_bbox$ymin)/2
# Determine the UTM Zone for the longitude center
#
utm_zone <- floor((long_center+180)/6)+1
# Extract the EPSG code
#
epsg_code <- ifelse(
lat_center >= 0,
utm_zone + 32600,
utm_zone + 32700
)
# Transform both GIS data layers to UTM
#
gadm_state <- st_transform(gadm_state, epsg_code)
# Get the bounding box of the state
#
state_bbox <- st_bbox(gadm_state)
# Determine the center longitude
#
long_center <- (state_bbox$xmax + state_bbox$xmin)/2
lat_center <- (state_bbox$ymax + state_bbox$ymin)/2
# Determine the UTM Zone for the longitude center
#
utm_zone <- floor((long_center+180)/6)+1
# Extract the EPSG code
#
epsg_code <- ifelse(
lat_center >= 0,
utm_zone + 32600,
utm_zone + 32700
)
# Transform both GIS data layers to UTM
#
gadm_state <- st_transform(gadm_state, epsg_code)
# Reading in packages
#
library(tidyverse)
library(sf)
library(data.table)
# Get the bounding box of the state
#
state_bbox <- st_bbox(gadm_state)
# Determine the center longitude
#
long_center <- (state_bbox$xmax + state_bbox$xmin)/2
lat_center <- (state_bbox$ymax + state_bbox$ymin)/2
# Determine the UTM Zone for the longitude center
#
utm_zone <- floor((long_center+180)/6)+1
# Extract the EPSG code
#
epsg_code <- ifelse(
lat_center >= 0,
utm_zone + 32600,
utm_zone + 32700
)
# Transform both GIS data layers to UTM
#
gadm_state <- st_transform(gadm_state, epsg_code)
osm_roads <- st_transform(osm_roads, epsg_code)
st_crs(osm_roads)
st_crs(gadm_state)
# Get the bounding box of the state
#
state_bbox <- st_bbox(gadm_state)
# Determine the center longitude
#
long_center <- (state_bbox$xmax + state_bbox$xmin)/2
lat_center <- (state_bbox$ymax + state_bbox$ymin)/2
# Determine the UTM Zone for the longitude center
#
utm_zone <- floor((long_center+180)/6)+1
# Extract the EPSG code
#
epsg_code <- ifelse(
lat_center >= 0,
utm_zone + 32600,
utm_zone + 32700
)
# Determine the UTM Zone for the longitude center
#
utm_zone <- floor((long_center+180)/6)+1
# Extract the EPSG code
#
epsg_code <- ifelse(
lat_center >= 0,
utm_zone + 32600,
utm_zone + 32700
)
# Transform both GIS data layers to UTM
#
gadm_state <- st_transform(gadm_state, epsg_code)
index <- 2
# %%%%%%%%%%%%%%%%%%%% READ IN GADM DATA %%%%%%%%%%%%%%%%%%%%%%% #
# Read in administrative boundary data
#
filename_gadm <- "gadm41_MEX_2.shp" # Replace with the name of your GADM file
gadm_poly <- st_read(paste0(gadm_dir, "/", filename_gadm))
# Replace periods in the ID column with underscores
#
gadm_poly$GID_1 <- gsub("\\.", "_", gadm_poly$GID_1)
gadm_poly$GID_2 <- gsub("\\.", "_", gadm_poly$GID_2)
# List all unique geographic identifiers. We want to isolate the file by a
# region larger than the administrative boundary to which we will aggregate,
# as this will allow us to subset the processing
#
GID_1_list <- unique(gadm_poly$GID_1)     #integer; does not contain leading zeroes
# Use index input to subset to single "state" or "district" for reduction
# of processing time
#
GID_in <- GID_1_list[index]
# Select the data for the chosen state.
# Make sure the subsequent number for the GID column name matches the level
# at which you are doing your analysis. In this example, analysis is done
# for each municipality (Level 2) in a particular state (Level 1), so the chosen
# column is GID_1 rather than GID_2 (municipality) or GID_0 (country).
#
gadm_state <- gadm_poly[gadm_poly$GID_1 == GID_in, ]
head(gadm_state)
# Get the bounding box of the state
#
state_bbox <- st_bbox(gadm_state)
# Determine the center longitude
#
long_center <- (state_bbox$xmax + state_bbox$xmin)/2
lat_center <- (state_bbox$ymax + state_bbox$ymin)/2
# Determine the UTM Zone for the longitude center
#
utm_zone <- floor((long_center+180)/6)+1
# Extract the EPSG code
#
epsg_code <- ifelse(
lat_center >= 0,
utm_zone + 32600,
utm_zone + 32700
)
# Transform both GIS data layers to UTM
#
gadm_state <- st_transform(gadm_state, epsg_code)
osm_roads <- st_transform(osm_roads, epsg_code)
index <- 1
# %%%%%%%%%%%%%%%%%%%% READ IN GADM DATA %%%%%%%%%%%%%%%%%%%%%%% #
# Read in administrative boundary data
#
filename_gadm <- "gadm41_MEX_2.shp" # Replace with the name of your GADM file
gadm_poly <- st_read(paste0(gadm_dir, "/", filename_gadm))
# Replace periods in the ID column with underscores
#
gadm_poly$GID_1 <- gsub("\\.", "_", gadm_poly$GID_1)
gadm_poly$GID_2 <- gsub("\\.", "_", gadm_poly$GID_2)
# List all unique geographic identifiers. We want to isolate the file by a
# region larger than the administrative boundary to which we will aggregate,
# as this will allow us to subset the processing
#
GID_1_list <- unique(gadm_poly$GID_1)     #integer; does not contain leading zeroes
# Use index input to subset to single "state" or "district" for reduction
# of processing time
#
GID_in <- GID_1_list[index]
# Select the data for the chosen state.
# Make sure the subsequent number for the GID column name matches the level
# at which you are doing your analysis. In this example, analysis is done
# for each municipality (Level 2) in a particular state (Level 1), so the chosen
# column is GID_1 rather than GID_2 (municipality) or GID_0 (country).
#
gadm_state <- gadm_poly[gadm_poly$GID_1 == GID_in, ]
# %%%%%%%%%%%%%%%%%%%% READ IN OPENSTREETMAP DATA %%%%%%%%%%%%%%%%%%%%%%% #
# Read in OSM roads
# The file may take a minute or two to load, as it's a big file.
# There may be millions of observations, depending on the size of the region.
#
filename_osm <- "gis_osm_roads_free_1.shp" # Replace with your file's name
osm_roads <- st_read(paste0(roads_indir, "/", filename_osm))
# Get the bounding box of the state
#
state_bbox <- st_bbox(gadm_state)
# Determine the center longitude
#
long_center <- (state_bbox$xmax + state_bbox$xmin)/2
lat_center <- (state_bbox$ymax + state_bbox$ymin)/2
# Determine the UTM Zone for the longitude center
#
utm_zone <- floor((long_center+180)/6)+1
# Extract the EPSG code
#
epsg_code <- ifelse(
lat_center >= 0,
utm_zone + 32600,
utm_zone + 32700
)
# Transform both GIS data layers to UTM
#
gadm_state <- st_transform(gadm_state, epsg_code)
osm_roads <- st_transform(osm_roads, epsg_code)
# Subset column names
#
gadm_state <- gadm_state[c("GID_1", "GID_2", "geometry")]
osm_roads <- osm_roads[c("fclass", "geometry")]
# Apply the intersection between each municipality (level 2) and road
#
gadm_level2_full_osm <- st_intersection(gadm_state, osm_roads)
unique(st_geometry_type(gadm_tract_full_osm$geometry))
unique(st_geometry_type(gadm_level2_full_osm$geometry))
# Calculate length for  after cropping to polygon fit
#
gadm_level2_full_osm$len_m <- st_length(gadm_tract_full_osm$geometry)
# Calculate length for  after cropping to polygon fit
#
gadm_level2_full_osm$len_m <- st_length(gadm_level2_full_osm$geometry)
# Set as data.table
#
gadm_level2_full_osm_dt <- setDT(gadm_level2_full_osm)
# Summation of length measures by municipality and road type
#
gadm_level2_sum <- gadm_level2_full_osm[, .(length = (sum(len_m))),
by=.(GID_2, fclass)]
# Estimate of total length by class
#
rd_gadm_primary <- gadm_level2_sum[fclass %in% c("primary", "primary_link",
"trunk", "trunk_link",
"motorway", "motorway_link"),
.(prim_len = sum(length)), by=.(GID_2)]
rd_gadm_secondary <- gadm_level2_sum[fclass %in% c("secondary", "secondary_link",
"tertiary", "tertiary_link"),
.(sec_len = sum(length)), by=.(GID_2)]
rd_gadm_local <- gadm_level2_sum[fclass %in% c("unclassified", "residential",
"living_street"),
.(local_len = sum(length)), by=.(GID_2)]
rd_gadm_track <- gadm_level2_sum[fclass %in% c("track", "track_grade2",
"track_grade3", "track_grade4",
"track_grade5"),
.(track_len = sum(length)), by=.(GID_2)]
#define other- cycleway, footway, path, pedestrian, service, steps
rd_gadm_other <- gadm_level2_sum[fclass %in% c("cycleway", "footway", "steps",
"path", "pedestrian", "service"),
.(other_len = sum(length)), by=.(GID_2)]
gadm_tract_total <- gadm_level2_sum[, .(total_len = sum(length)), by = GID_2]
# Rejoin class level lengths to municipalities
#
level1_rd_length <- left_join(gadm_state, rd_gadm_primary, by = "GID_2")
level1_rd_length <- left_join(level1_rd_length, rd_gadm_secondary, by = "GID_2")
level1_rd_length <- left_join(level1_rd_length, rd_gadm_local, by = "GID_2")
level1_rd_length <- left_join(level1_rd_length, rd_gadm_track, by = "GID_2")
level1_rd_length <- left_join(level1_rd_length, rd_gadm_other, by = "GID_2")
level1_rd_length <- left_join(level1_rd_length, gadm_tract_total, by = "GID_2")
# Save joined dataset
#
saveRDS(level1_rd_length, paste0(roads_outdir, "osm_road_len_by_fclass_",
GID, ".rds"))
roads_outdir
roads_indir
roads_outdir <- "C:/Users/zpopp/OneDrive - Boston University/Desktop/CAFE/OSM/OSM/Output"
# Save joined dataset
#
saveRDS(level1_rd_length, paste0(roads_outdir, "osm_road_len_by_fclass_",
GID, ".rds"))
# Save joined dataset
#
saveRDS(level1_rd_length, paste0(roads_outdir, "osm_road_len_by_fclass_",
GID_in, ".rds"))
# Apply intersection to road segments
road_intersections <- st_intersection(st_as_sf(gadm_tract_full_osm))
# Filter out road segments that overlap and only keep points, which are
# road intersections.
road_intersections <- road_intersections %>%
filter(st_geometry_type(.) == "POINT")
# Apply intersection to road segments
road_intersections <- st_intersection(st_as_sf(gadm_tract_full_osm))
# Apply intersection to road segments
road_intersections <- st_intersection(st_as_sf(gadm_level2_full_osm))
